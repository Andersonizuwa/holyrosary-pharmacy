import { User, Medicine, Delegation, Sale, Product } from '@/types';

export const mockUsers: User[] = [
  {
    id: 'u1',
    name: 'Super Admin',
    email: 'superadmin@holyrosa',
    role: 'superadmin',
    createdAt: new Date('2024-01-01').toISOString(),
  },
  {
    id: 'u2',
    name: 'Admin',
    email: 'admin@holyrosa',
    role: 'admin',
    createdAt: new Date('2024-01-01').toISOString(),
  },
  {
    id: 'u3',
    name: 'Store Officer',
    email: 'storeofficer@holyrosa',
    role: 'store_officer',
    createdAt: new Date('2024-01-01').toISOString(),
  },
  {
    id: 'u4',
    name: 'IPP User',
    email: 'ipp@holyrosa',
    role: 'ipp',
    createdAt: new Date('2024-01-01').toISOString(),
  },
  {
    id: 'u5',
    name: 'Dispensary User',
    email: 'dispensary@holyrosa',
    role: 'dispensary',
    createdAt: new Date('2024-01-01').toISOString(),
  },
];

export const mockMedicines: Medicine[] = [
  {
    id: 'm1',
    barcode: 'BAR001',
    name: 'Paracetamol',
    genericName: 'Paracetamol',
    brand: 'Acme',
    quantity: 200,
    unit: 'tablets',
    packageType: 'Tablet',
    manufacturingDate: new Date('2023-06-15').toISOString(),
    expiryDate: new Date('2026-02-01').toISOString(),
    buyPrice: 0.30,
    totalPrice: 60,
    sellingPrice: 50,
    lowStockThreshold: 20,
    createdAt: new Date('2024-01-15').toISOString(),
    updatedAt: new Date('2024-01-15').toISOString(),
  },
  {
    id: 'm2',
    barcode: 'BAR002',
    name: 'Amoxicillin',
    genericName: 'Amoxicillin',
    brand: 'PharmaCo',
    quantity: 100,
    unit: 'capsule',
    packageType: 'Tablet',
    manufacturingDate: new Date('2023-08-20').toISOString(),
    expiryDate: new Date('2026-06-01').toISOString(),
    buyPrice: 1.50,
    totalPrice: 150,
    sellingPrice: 120,
    lowStockThreshold: 20,
    createdAt: new Date('2024-01-15').toISOString(),
    updatedAt: new Date('2024-01-15').toISOString(),
  },
  {
    id: 'm3',
    barcode: 'BAR003',
    name: 'Ibuprofen 200mg',
    genericName: 'Ibuprofen',
    brand: 'Advil',
    quantity: 80,
    unit: 'Tablets',
    packageType: 'Tablet',
    manufacturingDate: new Date('2023-10-10').toISOString(),
    expiryDate: new Date('2025-06-30').toISOString(),
    buyPrice: 0.60,
    totalPrice: 48,
    sellingPrice: 1.00,
    lowStockThreshold: 100,
    createdAt: new Date('2024-01-15').toISOString(),
    updatedAt: new Date('2024-01-15').toISOString(),
  },
  {
    id: 'm4',
    barcode: 'BAR004',
    name: 'Cetirizine 10mg',
    genericName: 'Cetirizine',
    brand: 'Zyrtec',
    quantity: 0,
    unit: 'Tablets',
    packageType: 'Tablet',
    manufacturingDate: new Date('2023-05-05').toISOString(),
    expiryDate: new Date('2025-10-31').toISOString(),
    buyPrice: 0.45,
    totalPrice: 0,
    sellingPrice: 0.75,
    lowStockThreshold: 50,
    createdAt: new Date('2024-01-15').toISOString(),
    updatedAt: new Date('2024-01-15').toISOString(),
  },
  {
    id: 'm5',
    barcode: 'BAR005',
    name: 'Omeprazole 20mg',
    genericName: 'Omeprazole',
    brand: 'Prilosec',
    quantity: 150,
    unit: 'Capsules',
    packageType: 'Tablet',
    manufacturingDate: new Date('2023-09-12').toISOString(),
    expiryDate: new Date('2025-09-30').toISOString(),
    buyPrice: 1.80,
    totalPrice: 270,
    sellingPrice: 3.00,
    lowStockThreshold: 75,
    createdAt: new Date('2024-01-15').toISOString(),
    updatedAt: new Date('2024-01-15').toISOString(),
  },
  {
    id: 'm6',
    barcode: 'BAR006',
    name: 'Metformin 500mg',
    genericName: 'Metformin',
    brand: 'Glucophage',
    quantity: 300,
    unit: 'Tablets',
    packageType: 'Tablet',
    manufacturingDate: new Date('2023-07-22').toISOString(),
    expiryDate: new Date('2026-03-31').toISOString(),
    buyPrice: 0.90,
    totalPrice: 270,
    sellingPrice: 1.50,
    lowStockThreshold: 100,
    createdAt: new Date('2024-01-15').toISOString(),
    updatedAt: new Date('2024-01-15').toISOString(),
  },
  {
    id: 'm7',
    barcode: 'BAR007',
    name: 'Aspirin 100mg',
    genericName: 'Aspirin',
    brand: 'Bayer',
    quantity: 25,
    unit: 'Tablets',
    packageType: 'Tablet',
    manufacturingDate: new Date('2023-03-18').toISOString(),
    expiryDate: new Date('2024-12-31').toISOString(),
    buyPrice: 0.15,
    totalPrice: 3.75,
    sellingPrice: 0.30,
    lowStockThreshold: 50,
    createdAt: new Date('2024-01-15').toISOString(),
    updatedAt: new Date('2024-01-15').toISOString(),
  },
  {
    id: 'm8',
    barcode: 'BAR008',
    name: 'Losartan 50mg',
    genericName: 'Losartan',
    brand: 'Cozaar',
    quantity: 180,
    unit: 'Tablets',
    packageType: 'Tablet',
    manufacturingDate: new Date('2023-11-05').toISOString(),
    expiryDate: new Date('2025-11-30').toISOString(),
    buyPrice: 1.20,
    totalPrice: 216,
    sellingPrice: 2.00,
    lowStockThreshold: 80,
    createdAt: new Date('2024-01-15').toISOString(),
    updatedAt: new Date('2024-01-15').toISOString(),
  },
  {
    id: 'm9',
    barcode: 'TEST001',
    name: 'Ciprofloxacin 500mg',
    genericName: 'Ciprofloxacin',
    brand: 'Cipro',
    quantity: 120,
    unit: 'Tablets',
    packageType: 'Tablet',
    manufacturingDate: new Date('2023-12-10').toISOString(),
    expiryDate: new Date('2026-12-30').toISOString(),
    buyPrice: 2.00,
    totalPrice: 240,
    sellingPrice: 3.50,
    lowStockThreshold: 50,
    createdAt: new Date('2024-02-10').toISOString(),
    updatedAt: new Date('2024-02-10').toISOString(),
  },
];

export const mockDelegations: Delegation[] = [
  {
    id: 'd1',
    medicineId: 'm1',
    medicineName: 'Paracetamol',
    genericName: 'Paracetamol',
    quantity: 50,
    fromUserId: 'u3',
    fromUserName: 'Store Officer',
    toRole: 'ipp',
    toUserId: 'u4',
    toUserName: 'IPP User',
    remarks: 'For clinic use',
    status: 'accepted',
    delegationDate: new Date('2024-02-01').toISOString(),
    createdAt: new Date('2024-02-01').toISOString(),
    updatedAt: new Date('2024-02-01').toISOString(),
  },
  {
    id: 'd2',
    medicineId: 'm2',
    medicineName: 'Amoxicillin',
    genericName: 'Amoxicillin',
    quantity: 30,
    fromUserId: 'u3',
    fromUserName: 'Store Officer',
    toRole: 'dispensary',
    toUserId: 'u5',
    toUserName: 'Dispensary User',
    remarks: 'Antibiotic stock replenishment',
    status: 'accepted',
    delegationDate: new Date('2024-02-02').toISOString(),
    createdAt: new Date('2024-02-02').toISOString(),
    updatedAt: new Date('2024-02-02').toISOString(),
  },
  {
    id: 'd3',
    medicineId: 'm5',
    medicineName: 'Omeprazole 20mg',
    genericName: 'Omeprazole',
    quantity: 25,
    fromUserId: 'u3',
    fromUserName: 'Store Officer',
    toRole: 'ipp',
    toUserId: 'u4',
    toUserName: 'IPP User',
    remarks: 'GI medication delegation',
    status: 'pending',
    delegationDate: new Date('2024-02-05').toISOString(),
    createdAt: new Date('2024-02-05').toISOString(),
    updatedAt: new Date('2024-02-05').toISOString(),
  },
];

export const mockSales: Sale[] = (() => {
  const sales: Sale[] = [];
  // Generate sales data for the last 7 days
  for (let i = 6; i >= 0; i--) {
    const date = new Date();
    date.setDate(date.getDate() - i);
    date.setHours(10 + Math.floor(Math.random() * 8), 0, 0, 0);

    const amounts = [17.50, 45.20, 32.75, 28.90, 55.40, 38.10, 42.30];
    
    sales.push({
      id: String(sales.length + 1),
      items: [
        {
          medicineId: '1',
          medicineName: 'Paracetamol',
          quantity: Math.floor(Math.random() * 20) + 5,
          price: 0.50,
          total: amounts[i] * 0.3,
        },
        {
          medicineId: '2',
          medicineName: 'Amoxicillin',
          quantity: Math.floor(Math.random() * 10) + 2,
          price: 2.50,
          total: amounts[i] * 0.3,
        },
        {
          medicineId: '3',
          medicineName: 'Ibuprofen',
          quantity: Math.floor(Math.random() * 15) + 3,
          price: 1.00,
          total: amounts[i] * 0.4,
        },
      ],
      totalAmount: amounts[i],
      soldBy: '3',
      soldByName: 'Store Officer',
      createdAt: date.toISOString(),
    });
  }
  return sales;
})();

export const mockCredentials: Record<string, string> = {
  'superadmin@holyrosa': 'Password123!',
  'admin@holyrosa': 'Password123!',
  'storeofficer@holyrosa': 'Password123!',
  'ipp@holyrosa': 'Password123!',
  'dispensary@holyrosa': 'Password123!',
  // Also support .ng domain for compatibility
  'superadmin@holyrosa.ng': 'Password123!',
  'admin@holyrosa.ng': 'Password123!',
  'storeofficer@holyrosa.ng': 'Password123!',
  'ipp@holyrosa.ng': 'Password123!',
  'dispensary@holyrosa.ng': 'Password123!',
};

export const mockProducts: Product[] = [
  {
    id: '1',
    title: 'Premium Health Monitor',
    description: 'Advanced digital health monitoring device with multiple sensors',
    image: '/placeholder-product-1.jpg',
    price: 149.99,
    category: 'Medical Devices',
    inStock: true,
  },
  {
    id: '2',
    title: 'Wellness Supplement Pack',
    description: 'Complete nutritional supplement package for daily health',
    image: '/placeholder-product-2.jpg',
    price: 59.99,
    category: 'Supplements',
    inStock: true,
  },
  {
    id: '3',
    title: 'Digital Thermometer Pro',
    description: 'Fast and accurate infrared thermometer for all ages',
    image: '/placeholder-product-3.jpg',
    price: 34.99,
    category: 'Medical Devices',
    inStock: true,
  },
  {
    id: '4',
    title: 'Blood Pressure Monitor',
    description: 'Automatic upper arm blood pressure monitor with memory',
    image: '/placeholder-product-4.jpg',
    price: 79.99,
    category: 'Medical Devices',
    inStock: false,
  },
  {
    id: '5',
    title: 'First Aid Kit Deluxe',
    description: 'Comprehensive first aid kit for home and travel',
    image: '/placeholder-product-5.jpg',
    price: 44.99,
    category: 'Safety',
    inStock: true,
  },
  {
    id: '6',
    title: 'Pulse Oximeter',
    description: 'Fingertip pulse oximeter for oxygen saturation monitoring',
    image: '/placeholder-product-6.jpg',
    price: 29.99,
    category: 'Medical Devices',
    inStock: true,
  },
];
